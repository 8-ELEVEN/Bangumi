diff --git a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt
index 63ee79f..5c0c770 100644
--- a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt
+++ b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/react/RNGestureHandlerButtonViewManager.kt
@@ -132,7 +132,7 @@ class RNGestureHandlerButtonViewManager : ViewGroupManager<ButtonViewGroup>(), R
       _backgroundColor = color
     }
 
-    private fun applyRippleEffectWhenNeeded(selectable: Drawable): Drawable {
+    private fun applyRippleEffectWhenNeeded(selectable: Drawable?): Drawable? {
       val rippleColor = rippleColor
       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && selectable is RippleDrawable) {
         val states = arrayOf(intArrayOf(android.R.attr.state_enabled))
@@ -218,41 +218,45 @@ class RNGestureHandlerButtonViewManager : ViewGroupManager<ButtonViewGroup>(), R
       } else if (_backgroundColor == Color.TRANSPARENT && rippleColor == null) {
         background = createSelectableDrawable()
       } else {
-        val colorDrawable = PaintDrawable(_backgroundColor)
-        val selectable = createSelectableDrawable()
-        if (borderRadius != 0f) {
-          // Radius-connected lines below ought to be considered
-          // as a temporary solution. It do not allow to set
-          // different radius on each corner. However, I suppose it's fairly
-          // fine for button-related use cases.
-          // Therefore it might be used as long as:
-          // 1. ReactViewManager is not a generic class with a possibility to handle another ViewGroup
-          // 2. There's no way to force native behavior of ReactViewGroup's superclass's onTouchEvent
-          colorDrawable.setCornerRadius(borderRadius)
-          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
-            && selectable is RippleDrawable) {
-            val mask = PaintDrawable(Color.WHITE)
-            mask.setCornerRadius(borderRadius)
-            selectable.setDrawableByLayerId(android.R.id.mask, mask)
-          }
-        }
-        applyRippleEffectWhenNeeded(selectable)
-        val layerDrawable = LayerDrawable(arrayOf(colorDrawable, selectable))
-        background = layerDrawable
+        background = createSelectableDrawable()
+
+        // val colorDrawable = PaintDrawable(_backgroundColor)
+        // val selectable = createSelectableDrawable()
+        // if (borderRadius != 0f) {
+        //   // Radius-connected lines below ought to be considered
+        //   // as a temporary solution. It do not allow to set
+        //   // different radius on each corner. However, I suppose it's fairly
+        //   // fine for button-related use cases.
+        //   // Therefore it might be used as long as:
+        //   // 1. ReactViewManager is not a generic class with a possibility to handle another ViewGroup
+        //   // 2. There's no way to force native behavior of ReactViewGroup's superclass's onTouchEvent
+        //   colorDrawable.setCornerRadius(borderRadius)
+        //   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
+        //     && selectable is RippleDrawable) {
+        //     val mask = PaintDrawable(Color.WHITE)
+        //     mask.setCornerRadius(borderRadius)
+        //     selectable.setDrawableByLayerId(android.R.id.mask, mask)
+        //   }
+        // }
+        // applyRippleEffectWhenNeeded(selectable)
+        // val layerDrawable = LayerDrawable(arrayOf(colorDrawable, selectable))
+        // background = layerDrawable
       }
     }
 
-    private fun createSelectableDrawable(): Drawable {
-      val version = Build.VERSION.SDK_INT
-      val identifier = if (useBorderlessDrawable && version >= 21) SELECTABLE_ITEM_BACKGROUND_BORDERLESS else SELECTABLE_ITEM_BACKGROUND
-      val attrID = getAttrId(context, identifier)
-      context.theme.resolveAttribute(attrID, resolveOutValue, true)
-      return if (version >= 21) {
-        resources.getDrawable(resolveOutValue.resourceId, context.theme)
-      } else {
-        @Suppress("Deprecation")
-        resources.getDrawable(resolveOutValue.resourceId)
-      }
+    private fun createSelectableDrawable(): Drawable? {
+      return null
+
+      // val version = Build.VERSION.SDK_INT
+      // val identifier = if (useBorderlessDrawable && version >= 21) SELECTABLE_ITEM_BACKGROUND_BORDERLESS else SELECTABLE_ITEM_BACKGROUND
+      // val attrID = getAttrId(context, identifier)
+      // context.theme.resolveAttribute(attrID, resolveOutValue, true)
+      // return if (version >= 21) {
+      //   resources.getDrawable(resolveOutValue.resourceId, context.theme)
+      // } else {
+      //   @Suppress("Deprecation")
+      //   resources.getDrawable(resolveOutValue.resourceId)
+      // }
     }
 
     override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {
